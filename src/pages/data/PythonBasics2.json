[
    {
        "id":   "1",
        "head": "Lists",
        "code": "list1 = ['item1', 'item2', 'item3'] \n",
        "code2": "print(list1[2])",
        "exp":  "#Print displayed as: ['item3']",
        "but":  "Copy list code"
    },
    {
        "id":   "2",
        "head": "List slicing",
        "code": "list1 = ['item1', 'item2', 'item3', 'item4'] \n",
        "code2": "print(list1[1::3])",
        "exp":  "#Print displayed as: ['item2', 'item3']",
        "but":  "Copy list slicing code"
    },
    {
        "id":   "3",
        "head": "List memory pointing",
        "code": "list1 = ['item1', 'item2', 'item3', 'item4'] \n",
        "code2": "list2 = list1",
        "exp":  "#This way list memory location can be copied. If on the list is",
        "exp2": "#changed other one will be also changed.",
        "but":  "Copy list memory code"
    },
    {
        "id":   "4",
        "head": "List matrix",
        "code": "list1 = [[1,2,3],[4,5,6],[7,8,9]] \n",
        "code2": "print(list1[1][2])",
        "exp":  "#Print displayed as: 6",
        "but":  "Copy list matrix code"
    },
    {
        "id":   "5",
        "head": "List append",
        "code": "list1 = [1,2,3,4,5,6] \n",
        "code2": "list1.append(100) \n",
        "code3": "print(list1)",
        "exp":  "#Print displayed as: [1, 2, 3, 4, 5, 6, 100]",
        "exp2": "#append adding value to the list",
        "but":  "Copy list append code"
    },
    {
        "id":   "6",
        "head": "List pop",
        "code": "list1 = [1,2,3,4,5,6] \n",
        "code2": "new_list = list1.pop(4) \n",
        "code3": "print(new_list)",
        "exp":  "#Print displayed as: 5 pop is removing",
        "exp2": "#targeted values from the list.",
        "but":  "Copy list pop code"
    },
    {
        "id":   "7",
        "head": "List insert",
        "code": "list1 = [1,2,3,4,5,6] \n",
        "code2": "list1.insert(4, 100) \n",
        "code3": "print(list1)",
        "exp":  "#Print displayed as: [1, 2, 3, 4, 100, 5, 6]",
        "exp2": "#insert is adding value after sepecified location in a list",
        "but":  "Copy list insert code"
    },
    {
        "id":   "8",
        "head": "List unpacking",
        "code": "a, *other, c = [1,2,3,4,5,6] \n",
        "code2": "print(a) \n",
        "code3": "print(other) \n",
        "code4": "print(c)",
        "exp":  "# first Print a displayed as: 1. Print other will be [2,3,4,5]",
        "exp2": "#print c will be 6 ",
        "but":  "Copy list unpacking code"
    },
    {
        "id":   "9",
        "head": "Tuple",
        "code": "my_tuple = (1,2,3,4,5,6) \n",
        "code2": "my_tuple[1] = 'z'",
        "exp":  "#It is the same as list but can not be edited",
        "exp2": "#TypeError: 'tuple' object does not support item assignment",
        "but":  "Copy Tuple code"
    }    
]
