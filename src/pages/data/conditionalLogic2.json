[
    {
        "id":   "1",        
        "head": "Simple function",
        "code3": "def say_hello():\n",      
        "code4":"    print('Hello world')\n",
        "code5": "say_hello()",
        "exp":  "#it will Display:",
        "exp2": "#Hello world",
        "but":  "Copy Simple function code"
    },
    {
        "id":   "2",        
        "head": "Positional Function",
        "code3": "def Name_emoji(name, emoji):\n",      
        "code4":"    print(f'{name} {emoji}')\n",
        "code5": "Name_emoji('Samuel', ':)')",
        "exp":  "#it will Display:",
        "exp2": "#Samuel :)",
        "but":  "Copy Positional Function code"
    },
    {
        "id":   "3",        
        "head": "Function with default parameters",
        "code3": "def Name_emoji(name = 'Sam', emoji = '=^.^='):\n",      
        "code4":"    print(f'Helo {name} {emoji}')\n",
        "codes3": "Name_emoji('Samuel', ':)')\n",
        "codes4": "Name_emoji()\n",
        "exp":  "#first call: Helo Samuel :)",
        "exp2": "#Secon call: Helo Sam =^.^=",
        "but":  "Copy code"
    },
    {
        "id":   "4",        
        "head": "Function with return",
        "code3": "def Name_emoji(name = 'Sam', emoji = '=^.^='):\n",      
        "code4":"    return f'Helo {name} {emoji}'",
        "codes3": "print (Name_emoji('sami',':)'))\n",
        "exp":  "#Print will be:",
        "exp2": "#Helo sami :)",
        "but":  "Copy code"
    },
    {
        "id":   "5",        
        "head": "Function info",      
        "codes1": "def test(a):\n",
        "codes2":"    '''\n",
        "codes2a":"   info: This function prints para a\n",
        "codes2b":"   ''' \n",
        "code4": "    print(a)\n",
        "codes3": "help(test)\n",
        "codes4": "print(test.__doc__)\n",
        "exp":  "#First print: info: This function prints para a",
        "exp2": "#Second print: info: This function prints para a",
        "but":  "Copy code"
    },
    {
        "id":   "6",        
        "head": "Function *args",      
        "codes1": "def arg_function(*args):\n",
        "codes2":"    return sum(args)\n",
        "codes3": "print(arg_function(1,2,3,4,5))\n",
        "exp":  "#It will add all values in to tuple and sum it",
        "exp2": "Print: 15",
        "but":  "Copy code"
    },
    {
        "id":   "7",        
        "head": "Function **kwargs",      
        "codes1":  "def kwargs_function(**kwargs):\n",
        "codes2":  "   total = 0\n",
        "codes2a": "   for items in kwargs.values():\n",
        "codes1a1":"     total += items\n",
        "code4":   "   return total\n",
        "codes4": "print(kwargs_function(num1=5, num2=10, num3=15))\n",
        "exp":  "#kwargs function converts values in to dictionary",
        "exp2": "#print will be 30",
        "but":  "Copy code"
    },
    {
        "id":   "8",        
        "head": "the walrus operator function",
        "code2": "a = 'helloooooooooo'\n",      
        "codes1":  "if ((n := len(a)) > 10):\n",
        "codes2":  "   print(f'too long {n} elements')\n",
        "exp":  "#print will be:",
        "exp2": "#too long 14 elements",
        "but":  "Copy code"
    }

]